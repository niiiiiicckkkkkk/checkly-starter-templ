# This workflow will deploy source code on Cloud Run when a commit is pushed to
# the "trunk" branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Build (cloudbuild.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Source Developer (roles/run.sourceDeveloper)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources.
#
# 3. Change the values in the "env" block to match your values.

name: 'Deploy to Checkly and Cloud Run from Source'

on: [push]

env:
  PROJECT_ID: '' # TODO: update to your Google Cloud project ID
  REGION: '' # TODO: update to your region
  SERVICE: '' # TODO: update to your service name
  CHECKLY_API_KEY: ${{ secrets.CHECKLY_API_KEY }}
  CHECKLY_ACCOUNT_ID: ${{ secrets.CHECKLY_ACCOUNT_ID }}

jobs:
  # local will run checkly tests on a local development environment via a private location
  local:
    runs-on: 'ubuntu-latest'
    steps:
      # check out the source code and checks
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332'
      # download nodejs
      - name: Add Node to the Runner
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: 'npm ci'
      - name: 'Verify Synthetics'
        # run the checks in a private location and override ENVIRONMENT_URL to point to a local development environment
        # the application must be running locally along with a Checkly agent for this setup to work
        # Checks should use {{ ENVIRONMENT_URL }} or process.env.ENVIRONMENT_URL instead of a hardcoded URL
        run: 'npx checkly test -e ENVIRONMENT_URL="http://host.docker.internal:8080" --private-location "my-macbook"'

  # if tests pass on the local environment they are considered ready for deployment
  deploy:
    # make sure everything went smoothly on the local environment before continuing
    needs: ['local']
    runs-on: 'ubuntu-latest'

    # required permissions for Google Cloud authentication
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # See https://github.com/google-github-actions/auth for more options,
      # authenticating via a JSON credentials file.
      # Better practice would be using WIF (Workload Identity Federation)
      - name: Google Auth
        id:   auth
        uses: 'google-github-actions/auth@v0'
        # Specify Credentials saved as Github Actions Secret
        with:
          credentials_json: '${{ secrets.SA_CREDS }}'
      
      - name: 'Setup Node'
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: 'npm ci'

      # Deploy the application to Google Cloud
      - name: 'Deploy to Google Cloud'
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a different source folder, update the image name below:
          source: '.'

      # If required, use the Cloud Run URL output in later steps
      - name: 'Show URL'
        run: 'echo ${{ steps.deploy.outputs.url }}'

      # Update the ENVIRONMENT_URL in Checkly for monitoring
      - name: 'Set the public URL'
        run: 'npx checkly env update ENVIRONMENT_URL ${{steps.deploy.outputs.url}}'
      # Test synthetics against the release by overwriting ENVIRONMENT_URL
      # If everything goes smoothly deploy for monitering
      - name: 'Verify Synthetics on Release'
        run: 'npx checkly test -e ENVIRONMENT_URL="${{steps.deploy.outputs.url}}" && npx checkly deploy --force'
